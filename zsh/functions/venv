# venv - an interactive pull "down" menu to create or change virtualenv's
#
# usage:
#   venv                 # interactively select, create, deactivate
#   venv <name>          # activate venv, creating if necessary
#
# todo:
# - handle case when .venv doesn't exist yet - selection list shows empty option
# - maybe auto-upgrade pip version just after creating?
#
##



[[ -d ~/.venv/ ]] || mkdir ~/.venv
venvs=$(ls ~/.venv/)
venvs_menu=${venvs}
typeset -f "deactivate" > /dev/null && venvs_menu=$(printf "${venvs_menu}\n[x] deactivate\n")
venvs_menu=$(printf "${venvs_menu}\n[+] new\n")


# no argument provided, select interactively using fzf
if [ -z "$1" ]; then
  # sed removes any [.] prefix for the selected name
  # cut selects the chosen venv name
  selected_venv=$(echo "${venvs_menu}" | fzf --ansi | sed 's/\[.\] *//')
  #selected_venv=$(echo ${venvs} | fzf | sed 's/\[.\] *//' | cut -f2)

# argument provided, activate 
else
  selected_venv=$1
fi


# deactivate
if [[ "${selected_venv}" = "deactivate" ]]; then
  echo "deactivating"
  deactivate

# new
elif [[ "${selected_venv}" = "new" ]]; then
  # read new venv name, zsh method
  # vared -p 'new venv: ' -c new_venv     # ZSH method
  
  # read new venv name, bash method
  printf "new venv: "
  read new_venv
  
  venv_dir="$HOME/.venv/${new_venv}"
  if [[ -e "${venv_dir}"  ]]; then
      echo "${venv_dir} already exists"
      
  else 
      echo "creating ${venv_dir}"
      python3 -m venv "${venv_dir}"
      source "$HOME/.venv/${new_venv}/bin/activate"
      echo "upgrading pip"
      pip install --upgrade pip
  fi

# activate
elif [[ -n "${selected_venv}" ]]; then
  if [ ! -e "$HOME/.venv/${selected_venv}" ]; then
    echo "No venv named \"${selected_venv}\" was found. Available venvs:"
    echo "${venvs}"
    return -1
  else 
    source "$HOME/.venv/$selected_venv/bin/activate"
  fi
fi



